/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.mbo.keycloak.admin.api.dto.KeysMetadataRepresentationKeyMetadataRepresentationDto;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * KeysMetadataRepresentationDto
 */
@JsonPropertyOrder({
  KeysMetadataRepresentationDto.JSON_PROPERTY_ACTIVE,
  KeysMetadataRepresentationDto.JSON_PROPERTY_KEYS
})
@JsonTypeName("KeysMetadataRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KeysMetadataRepresentationDto {
  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Map<String, Object> active = null;

  public static final String JSON_PROPERTY_KEYS = "keys";
  private List<KeysMetadataRepresentationKeyMetadataRepresentationDto> keys = null;

  public KeysMetadataRepresentationDto() {
  }

  public KeysMetadataRepresentationDto active(Map<String, Object> active) {
    
    this.active = active;
    return this;
  }

  public KeysMetadataRepresentationDto putActiveItem(String key, Object activeItem) {
    if (this.active == null) {
      this.active = new HashMap<>();
    }
    this.active.put(key, activeItem);
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Map<String, Object> active) {
    this.active = active;
  }


  public KeysMetadataRepresentationDto keys(List<KeysMetadataRepresentationKeyMetadataRepresentationDto> keys) {
    
    this.keys = keys;
    return this;
  }

  public KeysMetadataRepresentationDto addKeysItem(KeysMetadataRepresentationKeyMetadataRepresentationDto keysItem) {
    if (this.keys == null) {
      this.keys = new ArrayList<>();
    }
    this.keys.add(keysItem);
    return this;
  }

   /**
   * Get keys
   * @return keys
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<KeysMetadataRepresentationKeyMetadataRepresentationDto> getKeys() {
    return keys;
  }


  @JsonProperty(JSON_PROPERTY_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeys(List<KeysMetadataRepresentationKeyMetadataRepresentationDto> keys) {
    this.keys = keys;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeysMetadataRepresentationDto keysMetadataRepresentation = (KeysMetadataRepresentationDto) o;
    return Objects.equals(this.active, keysMetadataRepresentation.active) &&
        Objects.equals(this.keys, keysMetadataRepresentation.keys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, keys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeysMetadataRepresentationDto {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

