/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * MultivaluedHashMapDto
 */
@JsonPropertyOrder({
  MultivaluedHashMapDto.JSON_PROPERTY_EMPTY,
  MultivaluedHashMapDto.JSON_PROPERTY_LOAD_FACTOR,
  MultivaluedHashMapDto.JSON_PROPERTY_THRESHOLD
})
@JsonTypeName("MultivaluedHashMap")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MultivaluedHashMapDto {
  public static final String JSON_PROPERTY_EMPTY = "empty";
  private Boolean empty;

  public static final String JSON_PROPERTY_LOAD_FACTOR = "loadFactor";
  private Float loadFactor;

  public static final String JSON_PROPERTY_THRESHOLD = "threshold";
  private Integer threshold;

  public MultivaluedHashMapDto() {
  }

  public MultivaluedHashMapDto empty(Boolean empty) {
    
    this.empty = empty;
    return this;
  }

   /**
   * Get empty
   * @return empty
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmpty() {
    return empty;
  }


  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmpty(Boolean empty) {
    this.empty = empty;
  }


  public MultivaluedHashMapDto loadFactor(Float loadFactor) {
    
    this.loadFactor = loadFactor;
    return this;
  }

   /**
   * Get loadFactor
   * @return loadFactor
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LOAD_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getLoadFactor() {
    return loadFactor;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadFactor(Float loadFactor) {
    this.loadFactor = loadFactor;
  }


  public MultivaluedHashMapDto threshold(Integer threshold) {
    
    this.threshold = threshold;
    return this;
  }

   /**
   * Get threshold
   * @return threshold
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreshold() {
    return threshold;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreshold(Integer threshold) {
    this.threshold = threshold;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultivaluedHashMapDto multivaluedHashMap = (MultivaluedHashMapDto) o;
    return Objects.equals(this.empty, multivaluedHashMap.empty) &&
        Objects.equals(this.loadFactor, multivaluedHashMap.loadFactor) &&
        Objects.equals(this.threshold, multivaluedHashMap.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(empty, loadFactor, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultivaluedHashMapDto {\n");
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("    loadFactor: ").append(toIndentedString(loadFactor)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

