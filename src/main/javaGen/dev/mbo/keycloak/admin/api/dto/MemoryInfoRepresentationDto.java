/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * MemoryInfoRepresentationDto
 */
@JsonPropertyOrder({
  MemoryInfoRepresentationDto.JSON_PROPERTY_FREE,
  MemoryInfoRepresentationDto.JSON_PROPERTY_FREE_FORMATED,
  MemoryInfoRepresentationDto.JSON_PROPERTY_FREE_PERCENTAGE,
  MemoryInfoRepresentationDto.JSON_PROPERTY_TOTAL,
  MemoryInfoRepresentationDto.JSON_PROPERTY_TOTAL_FORMATED,
  MemoryInfoRepresentationDto.JSON_PROPERTY_USED,
  MemoryInfoRepresentationDto.JSON_PROPERTY_USED_FORMATED
})
@JsonTypeName("MemoryInfoRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MemoryInfoRepresentationDto {
  public static final String JSON_PROPERTY_FREE = "free";
  private Long free;

  public static final String JSON_PROPERTY_FREE_FORMATED = "freeFormated";
  private String freeFormated;

  public static final String JSON_PROPERTY_FREE_PERCENTAGE = "freePercentage";
  private Long freePercentage;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Long total;

  public static final String JSON_PROPERTY_TOTAL_FORMATED = "totalFormated";
  private String totalFormated;

  public static final String JSON_PROPERTY_USED = "used";
  private Long used;

  public static final String JSON_PROPERTY_USED_FORMATED = "usedFormated";
  private String usedFormated;

  public MemoryInfoRepresentationDto() {
  }

  public MemoryInfoRepresentationDto free(Long free) {
    
    this.free = free;
    return this;
  }

   /**
   * Get free
   * @return free
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_FREE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFree() {
    return free;
  }


  @JsonProperty(JSON_PROPERTY_FREE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFree(Long free) {
    this.free = free;
  }


  public MemoryInfoRepresentationDto freeFormated(String freeFormated) {
    
    this.freeFormated = freeFormated;
    return this;
  }

   /**
   * Get freeFormated
   * @return freeFormated
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_FREE_FORMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFreeFormated() {
    return freeFormated;
  }


  @JsonProperty(JSON_PROPERTY_FREE_FORMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreeFormated(String freeFormated) {
    this.freeFormated = freeFormated;
  }


  public MemoryInfoRepresentationDto freePercentage(Long freePercentage) {
    
    this.freePercentage = freePercentage;
    return this;
  }

   /**
   * Get freePercentage
   * @return freePercentage
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_FREE_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFreePercentage() {
    return freePercentage;
  }


  @JsonProperty(JSON_PROPERTY_FREE_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreePercentage(Long freePercentage) {
    this.freePercentage = freePercentage;
  }


  public MemoryInfoRepresentationDto total(Long total) {
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotal(Long total) {
    this.total = total;
  }


  public MemoryInfoRepresentationDto totalFormated(String totalFormated) {
    
    this.totalFormated = totalFormated;
    return this;
  }

   /**
   * Get totalFormated
   * @return totalFormated
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TOTAL_FORMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalFormated() {
    return totalFormated;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_FORMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalFormated(String totalFormated) {
    this.totalFormated = totalFormated;
  }


  public MemoryInfoRepresentationDto used(Long used) {
    
    this.used = used;
    return this;
  }

   /**
   * Get used
   * @return used
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsed() {
    return used;
  }


  @JsonProperty(JSON_PROPERTY_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsed(Long used) {
    this.used = used;
  }


  public MemoryInfoRepresentationDto usedFormated(String usedFormated) {
    
    this.usedFormated = usedFormated;
    return this;
  }

   /**
   * Get usedFormated
   * @return usedFormated
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USED_FORMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsedFormated() {
    return usedFormated;
  }


  @JsonProperty(JSON_PROPERTY_USED_FORMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedFormated(String usedFormated) {
    this.usedFormated = usedFormated;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemoryInfoRepresentationDto memoryInfoRepresentation = (MemoryInfoRepresentationDto) o;
    return Objects.equals(this.free, memoryInfoRepresentation.free) &&
        Objects.equals(this.freeFormated, memoryInfoRepresentation.freeFormated) &&
        Objects.equals(this.freePercentage, memoryInfoRepresentation.freePercentage) &&
        Objects.equals(this.total, memoryInfoRepresentation.total) &&
        Objects.equals(this.totalFormated, memoryInfoRepresentation.totalFormated) &&
        Objects.equals(this.used, memoryInfoRepresentation.used) &&
        Objects.equals(this.usedFormated, memoryInfoRepresentation.usedFormated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(free, freeFormated, freePercentage, total, totalFormated, used, usedFormated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemoryInfoRepresentationDto {\n");
    sb.append("    free: ").append(toIndentedString(free)).append("\n");
    sb.append("    freeFormated: ").append(toIndentedString(freeFormated)).append("\n");
    sb.append("    freePercentage: ").append(toIndentedString(freePercentage)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalFormated: ").append(toIndentedString(totalFormated)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    usedFormated: ").append(toIndentedString(usedFormated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

