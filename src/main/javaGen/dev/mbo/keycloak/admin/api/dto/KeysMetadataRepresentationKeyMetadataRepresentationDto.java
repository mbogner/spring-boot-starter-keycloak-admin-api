/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * KeysMetadataRepresentationKeyMetadataRepresentationDto
 */
@JsonPropertyOrder({
  KeysMetadataRepresentationKeyMetadataRepresentationDto.JSON_PROPERTY_ALGORITHM,
  KeysMetadataRepresentationKeyMetadataRepresentationDto.JSON_PROPERTY_CERTIFICATE,
  KeysMetadataRepresentationKeyMetadataRepresentationDto.JSON_PROPERTY_KID,
  KeysMetadataRepresentationKeyMetadataRepresentationDto.JSON_PROPERTY_PROVIDER_ID,
  KeysMetadataRepresentationKeyMetadataRepresentationDto.JSON_PROPERTY_PROVIDER_PRIORITY,
  KeysMetadataRepresentationKeyMetadataRepresentationDto.JSON_PROPERTY_PUBLIC_KEY,
  KeysMetadataRepresentationKeyMetadataRepresentationDto.JSON_PROPERTY_STATUS,
  KeysMetadataRepresentationKeyMetadataRepresentationDto.JSON_PROPERTY_TYPE,
  KeysMetadataRepresentationKeyMetadataRepresentationDto.JSON_PROPERTY_USE
})
@JsonTypeName("KeysMetadataRepresentation-KeyMetadataRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KeysMetadataRepresentationKeyMetadataRepresentationDto {
  public static final String JSON_PROPERTY_ALGORITHM = "algorithm";
  private String algorithm;

  public static final String JSON_PROPERTY_CERTIFICATE = "certificate";
  private String certificate;

  public static final String JSON_PROPERTY_KID = "kid";
  private String kid;

  public static final String JSON_PROPERTY_PROVIDER_ID = "providerId";
  private String providerId;

  public static final String JSON_PROPERTY_PROVIDER_PRIORITY = "providerPriority";
  private Long providerPriority;

  public static final String JSON_PROPERTY_PUBLIC_KEY = "publicKey";
  private String publicKey;

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  /**
   * Gets or Sets use
   */
  public enum UseEnum {
    SIG("SIG"),
    
    ENC("ENC");

    private String value;

    UseEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UseEnum fromValue(String value) {
      for (UseEnum b : UseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_USE = "use";
  private UseEnum use;

  public KeysMetadataRepresentationKeyMetadataRepresentationDto() {
  }

  public KeysMetadataRepresentationKeyMetadataRepresentationDto algorithm(String algorithm) {
    
    this.algorithm = algorithm;
    return this;
  }

   /**
   * Get algorithm
   * @return algorithm
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlgorithm() {
    return algorithm;
  }


  @JsonProperty(JSON_PROPERTY_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlgorithm(String algorithm) {
    this.algorithm = algorithm;
  }


  public KeysMetadataRepresentationKeyMetadataRepresentationDto certificate(String certificate) {
    
    this.certificate = certificate;
    return this;
  }

   /**
   * Get certificate
   * @return certificate
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCertificate() {
    return certificate;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public KeysMetadataRepresentationKeyMetadataRepresentationDto kid(String kid) {
    
    this.kid = kid;
    return this;
  }

   /**
   * Get kid
   * @return kid
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_KID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKid() {
    return kid;
  }


  @JsonProperty(JSON_PROPERTY_KID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKid(String kid) {
    this.kid = kid;
  }


  public KeysMetadataRepresentationKeyMetadataRepresentationDto providerId(String providerId) {
    
    this.providerId = providerId;
    return this;
  }

   /**
   * Get providerId
   * @return providerId
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProviderId() {
    return providerId;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  public KeysMetadataRepresentationKeyMetadataRepresentationDto providerPriority(Long providerPriority) {
    
    this.providerPriority = providerPriority;
    return this;
  }

   /**
   * Get providerPriority
   * @return providerPriority
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PROVIDER_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getProviderPriority() {
    return providerPriority;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProviderPriority(Long providerPriority) {
    this.providerPriority = providerPriority;
  }


  public KeysMetadataRepresentationKeyMetadataRepresentationDto publicKey(String publicKey) {
    
    this.publicKey = publicKey;
    return this;
  }

   /**
   * Get publicKey
   * @return publicKey
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PUBLIC_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublicKey() {
    return publicKey;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public KeysMetadataRepresentationKeyMetadataRepresentationDto status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }


  public KeysMetadataRepresentationKeyMetadataRepresentationDto type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public KeysMetadataRepresentationKeyMetadataRepresentationDto use(UseEnum use) {
    
    this.use = use;
    return this;
  }

   /**
   * Get use
   * @return use
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UseEnum getUse() {
    return use;
  }


  @JsonProperty(JSON_PROPERTY_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUse(UseEnum use) {
    this.use = use;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeysMetadataRepresentationKeyMetadataRepresentationDto keysMetadataRepresentationKeyMetadataRepresentation = (KeysMetadataRepresentationKeyMetadataRepresentationDto) o;
    return Objects.equals(this.algorithm, keysMetadataRepresentationKeyMetadataRepresentation.algorithm) &&
        Objects.equals(this.certificate, keysMetadataRepresentationKeyMetadataRepresentation.certificate) &&
        Objects.equals(this.kid, keysMetadataRepresentationKeyMetadataRepresentation.kid) &&
        Objects.equals(this.providerId, keysMetadataRepresentationKeyMetadataRepresentation.providerId) &&
        Objects.equals(this.providerPriority, keysMetadataRepresentationKeyMetadataRepresentation.providerPriority) &&
        Objects.equals(this.publicKey, keysMetadataRepresentationKeyMetadataRepresentation.publicKey) &&
        Objects.equals(this.status, keysMetadataRepresentationKeyMetadataRepresentation.status) &&
        Objects.equals(this.type, keysMetadataRepresentationKeyMetadataRepresentation.type) &&
        Objects.equals(this.use, keysMetadataRepresentationKeyMetadataRepresentation.use);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, certificate, kid, providerId, providerPriority, publicKey, status, type, use);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeysMetadataRepresentationKeyMetadataRepresentationDto {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    providerPriority: ").append(toIndentedString(providerPriority)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    use: ").append(toIndentedString(use)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

