/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * ProviderRepresentationDto
 */
@JsonPropertyOrder({
  ProviderRepresentationDto.JSON_PROPERTY_OPERATIONAL_INFO,
  ProviderRepresentationDto.JSON_PROPERTY_ORDER
})
@JsonTypeName("ProviderRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProviderRepresentationDto {
  public static final String JSON_PROPERTY_OPERATIONAL_INFO = "operationalInfo";
  private Map<String, Object> operationalInfo = null;

  public static final String JSON_PROPERTY_ORDER = "order";
  private Integer order;

  public ProviderRepresentationDto() {
  }

  public ProviderRepresentationDto operationalInfo(Map<String, Object> operationalInfo) {
    
    this.operationalInfo = operationalInfo;
    return this;
  }

  public ProviderRepresentationDto putOperationalInfoItem(String key, Object operationalInfoItem) {
    if (this.operationalInfo == null) {
      this.operationalInfo = new HashMap<>();
    }
    this.operationalInfo.put(key, operationalInfoItem);
    return this;
  }

   /**
   * Get operationalInfo
   * @return operationalInfo
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OPERATIONAL_INFO)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getOperationalInfo() {
    return operationalInfo;
  }


  @JsonProperty(JSON_PROPERTY_OPERATIONAL_INFO)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperationalInfo(Map<String, Object> operationalInfo) {
    this.operationalInfo = operationalInfo;
  }


  public ProviderRepresentationDto order(Integer order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(Integer order) {
    this.order = order;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderRepresentationDto providerRepresentation = (ProviderRepresentationDto) o;
    return Objects.equals(this.operationalInfo, providerRepresentation.operationalInfo) &&
        Objects.equals(this.order, providerRepresentation.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operationalInfo, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderRepresentationDto {\n");
    sb.append("    operationalInfo: ").append(toIndentedString(operationalInfo)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

