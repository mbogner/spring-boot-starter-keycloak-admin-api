/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.mbo.keycloak.admin.api.dto.MultivaluedHashMapDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * ComponentExportRepresentationDto
 */
@JsonPropertyOrder({
  ComponentExportRepresentationDto.JSON_PROPERTY_CONFIG,
  ComponentExportRepresentationDto.JSON_PROPERTY_ID,
  ComponentExportRepresentationDto.JSON_PROPERTY_NAME,
  ComponentExportRepresentationDto.JSON_PROPERTY_PROVIDER_ID,
  ComponentExportRepresentationDto.JSON_PROPERTY_SUB_COMPONENTS,
  ComponentExportRepresentationDto.JSON_PROPERTY_SUB_TYPE
})
@JsonTypeName("ComponentExportRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComponentExportRepresentationDto {
  public static final String JSON_PROPERTY_CONFIG = "config";
  private MultivaluedHashMapDto config;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PROVIDER_ID = "providerId";
  private String providerId;

  public static final String JSON_PROPERTY_SUB_COMPONENTS = "subComponents";
  private MultivaluedHashMapDto subComponents;

  public static final String JSON_PROPERTY_SUB_TYPE = "subType";
  private String subType;

  public ComponentExportRepresentationDto() {
  }

  public ComponentExportRepresentationDto config(MultivaluedHashMapDto config) {
    
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MultivaluedHashMapDto getConfig() {
    return config;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfig(MultivaluedHashMapDto config) {
    this.config = config;
  }


  public ComponentExportRepresentationDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public ComponentExportRepresentationDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ComponentExportRepresentationDto providerId(String providerId) {
    
    this.providerId = providerId;
    return this;
  }

   /**
   * Get providerId
   * @return providerId
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProviderId() {
    return providerId;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  public ComponentExportRepresentationDto subComponents(MultivaluedHashMapDto subComponents) {
    
    this.subComponents = subComponents;
    return this;
  }

   /**
   * Get subComponents
   * @return subComponents
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_SUB_COMPONENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MultivaluedHashMapDto getSubComponents() {
    return subComponents;
  }


  @JsonProperty(JSON_PROPERTY_SUB_COMPONENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubComponents(MultivaluedHashMapDto subComponents) {
    this.subComponents = subComponents;
  }


  public ComponentExportRepresentationDto subType(String subType) {
    
    this.subType = subType;
    return this;
  }

   /**
   * Get subType
   * @return subType
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SUB_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubType() {
    return subType;
  }


  @JsonProperty(JSON_PROPERTY_SUB_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubType(String subType) {
    this.subType = subType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentExportRepresentationDto componentExportRepresentation = (ComponentExportRepresentationDto) o;
    return Objects.equals(this.config, componentExportRepresentation.config) &&
        Objects.equals(this.id, componentExportRepresentation.id) &&
        Objects.equals(this.name, componentExportRepresentation.name) &&
        Objects.equals(this.providerId, componentExportRepresentation.providerId) &&
        Objects.equals(this.subComponents, componentExportRepresentation.subComponents) &&
        Objects.equals(this.subType, componentExportRepresentation.subType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, id, name, providerId, subComponents, subType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentExportRepresentationDto {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    subComponents: ").append(toIndentedString(subComponents)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

