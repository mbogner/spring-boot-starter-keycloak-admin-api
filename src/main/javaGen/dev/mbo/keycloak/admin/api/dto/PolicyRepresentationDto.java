/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.mbo.keycloak.admin.api.dto.ResourceRepresentationDto;
import dev.mbo.keycloak.admin.api.dto.ScopeRepresentationDto;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * PolicyRepresentationDto
 */
@JsonPropertyOrder({
  PolicyRepresentationDto.JSON_PROPERTY_CONFIG,
  PolicyRepresentationDto.JSON_PROPERTY_DECISION_STRATEGY,
  PolicyRepresentationDto.JSON_PROPERTY_DESCRIPTION,
  PolicyRepresentationDto.JSON_PROPERTY_ID,
  PolicyRepresentationDto.JSON_PROPERTY_LOGIC,
  PolicyRepresentationDto.JSON_PROPERTY_NAME,
  PolicyRepresentationDto.JSON_PROPERTY_OWNER,
  PolicyRepresentationDto.JSON_PROPERTY_POLICIES,
  PolicyRepresentationDto.JSON_PROPERTY_RESOURCES,
  PolicyRepresentationDto.JSON_PROPERTY_RESOURCES_DATA,
  PolicyRepresentationDto.JSON_PROPERTY_SCOPES,
  PolicyRepresentationDto.JSON_PROPERTY_SCOPES_DATA,
  PolicyRepresentationDto.JSON_PROPERTY_TYPE
})
@JsonTypeName("PolicyRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PolicyRepresentationDto {
  public static final String JSON_PROPERTY_CONFIG = "config";
  private Map<String, Object> config = null;

  /**
   * Gets or Sets decisionStrategy
   */
  public enum DecisionStrategyEnum {
    AFFIRMATIVE("AFFIRMATIVE"),
    
    UNANIMOUS("UNANIMOUS"),
    
    CONSENSUS("CONSENSUS");

    private String value;

    DecisionStrategyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DecisionStrategyEnum fromValue(String value) {
      for (DecisionStrategyEnum b : DecisionStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DECISION_STRATEGY = "decisionStrategy";
  private DecisionStrategyEnum decisionStrategy;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  /**
   * Gets or Sets logic
   */
  public enum LogicEnum {
    POSITIVE("POSITIVE"),
    
    NEGATIVE("NEGATIVE");

    private String value;

    LogicEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LogicEnum fromValue(String value) {
      for (LogicEnum b : LogicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LOGIC = "logic";
  private LogicEnum logic;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_OWNER = "owner";
  private String owner;

  public static final String JSON_PROPERTY_POLICIES = "policies";
  private List<String> policies = null;

  public static final String JSON_PROPERTY_RESOURCES = "resources";
  private List<String> resources = null;

  public static final String JSON_PROPERTY_RESOURCES_DATA = "resourcesData";
  private List<ResourceRepresentationDto> resourcesData = null;

  public static final String JSON_PROPERTY_SCOPES = "scopes";
  private List<String> scopes = null;

  public static final String JSON_PROPERTY_SCOPES_DATA = "scopesData";
  private List<ScopeRepresentationDto> scopesData = null;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public PolicyRepresentationDto() {
  }

  public PolicyRepresentationDto config(Map<String, Object> config) {
    
    this.config = config;
    return this;
  }

  public PolicyRepresentationDto putConfigItem(String key, Object configItem) {
    if (this.config == null) {
      this.config = new HashMap<>();
    }
    this.config.put(key, configItem);
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getConfig() {
    return config;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfig(Map<String, Object> config) {
    this.config = config;
  }


  public PolicyRepresentationDto decisionStrategy(DecisionStrategyEnum decisionStrategy) {
    
    this.decisionStrategy = decisionStrategy;
    return this;
  }

   /**
   * Get decisionStrategy
   * @return decisionStrategy
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DECISION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DecisionStrategyEnum getDecisionStrategy() {
    return decisionStrategy;
  }


  @JsonProperty(JSON_PROPERTY_DECISION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecisionStrategy(DecisionStrategyEnum decisionStrategy) {
    this.decisionStrategy = decisionStrategy;
  }


  public PolicyRepresentationDto description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public PolicyRepresentationDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public PolicyRepresentationDto logic(LogicEnum logic) {
    
    this.logic = logic;
    return this;
  }

   /**
   * Get logic
   * @return logic
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LOGIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogicEnum getLogic() {
    return logic;
  }


  @JsonProperty(JSON_PROPERTY_LOGIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogic(LogicEnum logic) {
    this.logic = logic;
  }


  public PolicyRepresentationDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public PolicyRepresentationDto owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOwner() {
    return owner;
  }


  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwner(String owner) {
    this.owner = owner;
  }


  public PolicyRepresentationDto policies(List<String> policies) {
    
    this.policies = policies;
    return this;
  }

  public PolicyRepresentationDto addPoliciesItem(String policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

   /**
   * Get policies
   * @return policies
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_POLICIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPolicies() {
    return policies;
  }


  @JsonProperty(JSON_PROPERTY_POLICIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolicies(List<String> policies) {
    this.policies = policies;
  }


  public PolicyRepresentationDto resources(List<String> resources) {
    
    this.resources = resources;
    return this;
  }

  public PolicyRepresentationDto addResourcesItem(String resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getResources() {
    return resources;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResources(List<String> resources) {
    this.resources = resources;
  }


  public PolicyRepresentationDto resourcesData(List<ResourceRepresentationDto> resourcesData) {
    
    this.resourcesData = resourcesData;
    return this;
  }

  public PolicyRepresentationDto addResourcesDataItem(ResourceRepresentationDto resourcesDataItem) {
    if (this.resourcesData == null) {
      this.resourcesData = new ArrayList<>();
    }
    this.resourcesData.add(resourcesDataItem);
    return this;
  }

   /**
   * Get resourcesData
   * @return resourcesData
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_RESOURCES_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ResourceRepresentationDto> getResourcesData() {
    return resourcesData;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCES_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourcesData(List<ResourceRepresentationDto> resourcesData) {
    this.resourcesData = resourcesData;
  }


  public PolicyRepresentationDto scopes(List<String> scopes) {
    
    this.scopes = scopes;
    return this;
  }

  public PolicyRepresentationDto addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Get scopes
   * @return scopes
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getScopes() {
    return scopes;
  }


  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public PolicyRepresentationDto scopesData(List<ScopeRepresentationDto> scopesData) {
    
    this.scopesData = scopesData;
    return this;
  }

  public PolicyRepresentationDto addScopesDataItem(ScopeRepresentationDto scopesDataItem) {
    if (this.scopesData == null) {
      this.scopesData = new ArrayList<>();
    }
    this.scopesData.add(scopesDataItem);
    return this;
  }

   /**
   * Get scopesData
   * @return scopesData
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_SCOPES_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ScopeRepresentationDto> getScopesData() {
    return scopesData;
  }


  @JsonProperty(JSON_PROPERTY_SCOPES_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopesData(List<ScopeRepresentationDto> scopesData) {
    this.scopesData = scopesData;
  }


  public PolicyRepresentationDto type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyRepresentationDto policyRepresentation = (PolicyRepresentationDto) o;
    return Objects.equals(this.config, policyRepresentation.config) &&
        Objects.equals(this.decisionStrategy, policyRepresentation.decisionStrategy) &&
        Objects.equals(this.description, policyRepresentation.description) &&
        Objects.equals(this.id, policyRepresentation.id) &&
        Objects.equals(this.logic, policyRepresentation.logic) &&
        Objects.equals(this.name, policyRepresentation.name) &&
        Objects.equals(this.owner, policyRepresentation.owner) &&
        Objects.equals(this.policies, policyRepresentation.policies) &&
        Objects.equals(this.resources, policyRepresentation.resources) &&
        Objects.equals(this.resourcesData, policyRepresentation.resourcesData) &&
        Objects.equals(this.scopes, policyRepresentation.scopes) &&
        Objects.equals(this.scopesData, policyRepresentation.scopesData) &&
        Objects.equals(this.type, policyRepresentation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, decisionStrategy, description, id, logic, name, owner, policies, resources, resourcesData, scopes, scopesData, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyRepresentationDto {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    decisionStrategy: ").append(toIndentedString(decisionStrategy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logic: ").append(toIndentedString(logic)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    resourcesData: ").append(toIndentedString(resourcesData)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    scopesData: ").append(toIndentedString(scopesData)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

