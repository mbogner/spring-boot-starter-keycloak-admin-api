/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.mbo.keycloak.admin.api.dto.RoleRepresentationDto;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * RolesRepresentationDto
 */
@JsonPropertyOrder({
  RolesRepresentationDto.JSON_PROPERTY_CLIENT,
  RolesRepresentationDto.JSON_PROPERTY_REALM
})
@JsonTypeName("RolesRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RolesRepresentationDto {
  public static final String JSON_PROPERTY_CLIENT = "client";
  private Map<String, Object> client = null;

  public static final String JSON_PROPERTY_REALM = "realm";
  private List<RoleRepresentationDto> realm = null;

  public RolesRepresentationDto() {
  }

  public RolesRepresentationDto client(Map<String, Object> client) {
    
    this.client = client;
    return this;
  }

  public RolesRepresentationDto putClientItem(String key, Object clientItem) {
    if (this.client == null) {
      this.client = new HashMap<>();
    }
    this.client.put(key, clientItem);
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CLIENT)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getClient() {
    return client;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setClient(Map<String, Object> client) {
    this.client = client;
  }


  public RolesRepresentationDto realm(List<RoleRepresentationDto> realm) {
    
    this.realm = realm;
    return this;
  }

  public RolesRepresentationDto addRealmItem(RoleRepresentationDto realmItem) {
    if (this.realm == null) {
      this.realm = new ArrayList<>();
    }
    this.realm.add(realmItem);
    return this;
  }

   /**
   * Get realm
   * @return realm
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_REALM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RoleRepresentationDto> getRealm() {
    return realm;
  }


  @JsonProperty(JSON_PROPERTY_REALM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRealm(List<RoleRepresentationDto> realm) {
    this.realm = realm;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RolesRepresentationDto rolesRepresentation = (RolesRepresentationDto) o;
    return Objects.equals(this.client, rolesRepresentation.client) &&
        Objects.equals(this.realm, rolesRepresentation.realm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(client, realm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RolesRepresentationDto {\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    realm: ").append(toIndentedString(realm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

