/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.mbo.keycloak.admin.api.dto.ConfigPropertyRepresentationDto;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * AuthenticatorConfigInfoRepresentationDto
 */
@JsonPropertyOrder({
  AuthenticatorConfigInfoRepresentationDto.JSON_PROPERTY_HELP_TEXT,
  AuthenticatorConfigInfoRepresentationDto.JSON_PROPERTY_NAME,
  AuthenticatorConfigInfoRepresentationDto.JSON_PROPERTY_PROPERTIES,
  AuthenticatorConfigInfoRepresentationDto.JSON_PROPERTY_PROVIDER_ID
})
@JsonTypeName("AuthenticatorConfigInfoRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AuthenticatorConfigInfoRepresentationDto {
  public static final String JSON_PROPERTY_HELP_TEXT = "helpText";
  private String helpText;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private List<ConfigPropertyRepresentationDto> properties = null;

  public static final String JSON_PROPERTY_PROVIDER_ID = "providerId";
  private String providerId;

  public AuthenticatorConfigInfoRepresentationDto() {
  }

  public AuthenticatorConfigInfoRepresentationDto helpText(String helpText) {
    
    this.helpText = helpText;
    return this;
  }

   /**
   * Get helpText
   * @return helpText
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HELP_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHelpText() {
    return helpText;
  }


  @JsonProperty(JSON_PROPERTY_HELP_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHelpText(String helpText) {
    this.helpText = helpText;
  }


  public AuthenticatorConfigInfoRepresentationDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public AuthenticatorConfigInfoRepresentationDto properties(List<ConfigPropertyRepresentationDto> properties) {
    
    this.properties = properties;
    return this;
  }

  public AuthenticatorConfigInfoRepresentationDto addPropertiesItem(ConfigPropertyRepresentationDto propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ConfigPropertyRepresentationDto> getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(List<ConfigPropertyRepresentationDto> properties) {
    this.properties = properties;
  }


  public AuthenticatorConfigInfoRepresentationDto providerId(String providerId) {
    
    this.providerId = providerId;
    return this;
  }

   /**
   * Get providerId
   * @return providerId
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProviderId() {
    return providerId;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticatorConfigInfoRepresentationDto authenticatorConfigInfoRepresentation = (AuthenticatorConfigInfoRepresentationDto) o;
    return Objects.equals(this.helpText, authenticatorConfigInfoRepresentation.helpText) &&
        Objects.equals(this.name, authenticatorConfigInfoRepresentation.name) &&
        Objects.equals(this.properties, authenticatorConfigInfoRepresentation.properties) &&
        Objects.equals(this.providerId, authenticatorConfigInfoRepresentation.providerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(helpText, name, properties, providerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticatorConfigInfoRepresentationDto {\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

