/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.mbo.keycloak.admin.api.dto.PolicyRepresentationDto;
import dev.mbo.keycloak.admin.api.dto.ResourceRepresentationDto;
import dev.mbo.keycloak.admin.api.dto.ScopeRepresentationDto;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * ResourceServerRepresentationDto
 */
@JsonPropertyOrder({
  ResourceServerRepresentationDto.JSON_PROPERTY_ALLOW_REMOTE_RESOURCE_MANAGEMENT,
  ResourceServerRepresentationDto.JSON_PROPERTY_CLIENT_ID,
  ResourceServerRepresentationDto.JSON_PROPERTY_DECISION_STRATEGY,
  ResourceServerRepresentationDto.JSON_PROPERTY_ID,
  ResourceServerRepresentationDto.JSON_PROPERTY_NAME,
  ResourceServerRepresentationDto.JSON_PROPERTY_POLICIES,
  ResourceServerRepresentationDto.JSON_PROPERTY_POLICY_ENFORCEMENT_MODE,
  ResourceServerRepresentationDto.JSON_PROPERTY_RESOURCES,
  ResourceServerRepresentationDto.JSON_PROPERTY_SCOPES
})
@JsonTypeName("ResourceServerRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ResourceServerRepresentationDto {
  public static final String JSON_PROPERTY_ALLOW_REMOTE_RESOURCE_MANAGEMENT = "allowRemoteResourceManagement";
  private Boolean allowRemoteResourceManagement;

  public static final String JSON_PROPERTY_CLIENT_ID = "clientId";
  private String clientId;

  /**
   * Gets or Sets decisionStrategy
   */
  public enum DecisionStrategyEnum {
    AFFIRMATIVE("AFFIRMATIVE"),
    
    UNANIMOUS("UNANIMOUS"),
    
    CONSENSUS("CONSENSUS");

    private String value;

    DecisionStrategyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DecisionStrategyEnum fromValue(String value) {
      for (DecisionStrategyEnum b : DecisionStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DECISION_STRATEGY = "decisionStrategy";
  private DecisionStrategyEnum decisionStrategy;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_POLICIES = "policies";
  private List<PolicyRepresentationDto> policies = null;

  /**
   * Gets or Sets policyEnforcementMode
   */
  public enum PolicyEnforcementModeEnum {
    ENFORCING("ENFORCING"),
    
    PERMISSIVE("PERMISSIVE"),
    
    DISABLED("DISABLED");

    private String value;

    PolicyEnforcementModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PolicyEnforcementModeEnum fromValue(String value) {
      for (PolicyEnforcementModeEnum b : PolicyEnforcementModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_POLICY_ENFORCEMENT_MODE = "policyEnforcementMode";
  private PolicyEnforcementModeEnum policyEnforcementMode;

  public static final String JSON_PROPERTY_RESOURCES = "resources";
  private List<ResourceRepresentationDto> resources = null;

  public static final String JSON_PROPERTY_SCOPES = "scopes";
  private List<ScopeRepresentationDto> scopes = null;

  public ResourceServerRepresentationDto() {
  }

  public ResourceServerRepresentationDto allowRemoteResourceManagement(Boolean allowRemoteResourceManagement) {
    
    this.allowRemoteResourceManagement = allowRemoteResourceManagement;
    return this;
  }

   /**
   * Get allowRemoteResourceManagement
   * @return allowRemoteResourceManagement
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ALLOW_REMOTE_RESOURCE_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowRemoteResourceManagement() {
    return allowRemoteResourceManagement;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_REMOTE_RESOURCE_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowRemoteResourceManagement(Boolean allowRemoteResourceManagement) {
    this.allowRemoteResourceManagement = allowRemoteResourceManagement;
  }


  public ResourceServerRepresentationDto clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CLIENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientId() {
    return clientId;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public ResourceServerRepresentationDto decisionStrategy(DecisionStrategyEnum decisionStrategy) {
    
    this.decisionStrategy = decisionStrategy;
    return this;
  }

   /**
   * Get decisionStrategy
   * @return decisionStrategy
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DECISION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DecisionStrategyEnum getDecisionStrategy() {
    return decisionStrategy;
  }


  @JsonProperty(JSON_PROPERTY_DECISION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecisionStrategy(DecisionStrategyEnum decisionStrategy) {
    this.decisionStrategy = decisionStrategy;
  }


  public ResourceServerRepresentationDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public ResourceServerRepresentationDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ResourceServerRepresentationDto policies(List<PolicyRepresentationDto> policies) {
    
    this.policies = policies;
    return this;
  }

  public ResourceServerRepresentationDto addPoliciesItem(PolicyRepresentationDto policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

   /**
   * Get policies
   * @return policies
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_POLICIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PolicyRepresentationDto> getPolicies() {
    return policies;
  }


  @JsonProperty(JSON_PROPERTY_POLICIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolicies(List<PolicyRepresentationDto> policies) {
    this.policies = policies;
  }


  public ResourceServerRepresentationDto policyEnforcementMode(PolicyEnforcementModeEnum policyEnforcementMode) {
    
    this.policyEnforcementMode = policyEnforcementMode;
    return this;
  }

   /**
   * Get policyEnforcementMode
   * @return policyEnforcementMode
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_POLICY_ENFORCEMENT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PolicyEnforcementModeEnum getPolicyEnforcementMode() {
    return policyEnforcementMode;
  }


  @JsonProperty(JSON_PROPERTY_POLICY_ENFORCEMENT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolicyEnforcementMode(PolicyEnforcementModeEnum policyEnforcementMode) {
    this.policyEnforcementMode = policyEnforcementMode;
  }


  public ResourceServerRepresentationDto resources(List<ResourceRepresentationDto> resources) {
    
    this.resources = resources;
    return this;
  }

  public ResourceServerRepresentationDto addResourcesItem(ResourceRepresentationDto resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ResourceRepresentationDto> getResources() {
    return resources;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResources(List<ResourceRepresentationDto> resources) {
    this.resources = resources;
  }


  public ResourceServerRepresentationDto scopes(List<ScopeRepresentationDto> scopes) {
    
    this.scopes = scopes;
    return this;
  }

  public ResourceServerRepresentationDto addScopesItem(ScopeRepresentationDto scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Get scopes
   * @return scopes
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ScopeRepresentationDto> getScopes() {
    return scopes;
  }


  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopes(List<ScopeRepresentationDto> scopes) {
    this.scopes = scopes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceServerRepresentationDto resourceServerRepresentation = (ResourceServerRepresentationDto) o;
    return Objects.equals(this.allowRemoteResourceManagement, resourceServerRepresentation.allowRemoteResourceManagement) &&
        Objects.equals(this.clientId, resourceServerRepresentation.clientId) &&
        Objects.equals(this.decisionStrategy, resourceServerRepresentation.decisionStrategy) &&
        Objects.equals(this.id, resourceServerRepresentation.id) &&
        Objects.equals(this.name, resourceServerRepresentation.name) &&
        Objects.equals(this.policies, resourceServerRepresentation.policies) &&
        Objects.equals(this.policyEnforcementMode, resourceServerRepresentation.policyEnforcementMode) &&
        Objects.equals(this.resources, resourceServerRepresentation.resources) &&
        Objects.equals(this.scopes, resourceServerRepresentation.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowRemoteResourceManagement, clientId, decisionStrategy, id, name, policies, policyEnforcementMode, resources, scopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceServerRepresentationDto {\n");
    sb.append("    allowRemoteResourceManagement: ").append(toIndentedString(allowRemoteResourceManagement)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    decisionStrategy: ").append(toIndentedString(decisionStrategy)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    policyEnforcementMode: ").append(toIndentedString(policyEnforcementMode)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

