/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * CryptoInfoRepresentationDto
 */
@JsonPropertyOrder({
  CryptoInfoRepresentationDto.JSON_PROPERTY_CRYPTO_PROVIDER,
  CryptoInfoRepresentationDto.JSON_PROPERTY_SUPPORTED_KEYSTORE_TYPES
})
@JsonTypeName("CryptoInfoRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CryptoInfoRepresentationDto {
  public static final String JSON_PROPERTY_CRYPTO_PROVIDER = "cryptoProvider";
  private String cryptoProvider;

  public static final String JSON_PROPERTY_SUPPORTED_KEYSTORE_TYPES = "supportedKeystoreTypes";
  private List<String> supportedKeystoreTypes = null;

  public CryptoInfoRepresentationDto() {
  }

  public CryptoInfoRepresentationDto cryptoProvider(String cryptoProvider) {
    
    this.cryptoProvider = cryptoProvider;
    return this;
  }

   /**
   * Get cryptoProvider
   * @return cryptoProvider
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CRYPTO_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCryptoProvider() {
    return cryptoProvider;
  }


  @JsonProperty(JSON_PROPERTY_CRYPTO_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCryptoProvider(String cryptoProvider) {
    this.cryptoProvider = cryptoProvider;
  }


  public CryptoInfoRepresentationDto supportedKeystoreTypes(List<String> supportedKeystoreTypes) {
    
    this.supportedKeystoreTypes = supportedKeystoreTypes;
    return this;
  }

  public CryptoInfoRepresentationDto addSupportedKeystoreTypesItem(String supportedKeystoreTypesItem) {
    if (this.supportedKeystoreTypes == null) {
      this.supportedKeystoreTypes = new ArrayList<>();
    }
    this.supportedKeystoreTypes.add(supportedKeystoreTypesItem);
    return this;
  }

   /**
   * Get supportedKeystoreTypes
   * @return supportedKeystoreTypes
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SUPPORTED_KEYSTORE_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSupportedKeystoreTypes() {
    return supportedKeystoreTypes;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_KEYSTORE_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedKeystoreTypes(List<String> supportedKeystoreTypes) {
    this.supportedKeystoreTypes = supportedKeystoreTypes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CryptoInfoRepresentationDto cryptoInfoRepresentation = (CryptoInfoRepresentationDto) o;
    return Objects.equals(this.cryptoProvider, cryptoInfoRepresentation.cryptoProvider) &&
        Objects.equals(this.supportedKeystoreTypes, cryptoInfoRepresentation.supportedKeystoreTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cryptoProvider, supportedKeystoreTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CryptoInfoRepresentationDto {\n");
    sb.append("    cryptoProvider: ").append(toIndentedString(cryptoProvider)).append("\n");
    sb.append("    supportedKeystoreTypes: ").append(toIndentedString(supportedKeystoreTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

