/*
 * ${product.name.full} Admin REST API
 * This is a REST API reference for the ${product.name.full} Admin REST API.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.mbo.keycloak.admin.api.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.mbo.keycloak.admin.api.dto.ClientRepresentationDto;
import dev.mbo.keycloak.admin.api.dto.GroupRepresentationDto;
import dev.mbo.keycloak.admin.api.dto.IdentityProviderMapperRepresentationDto;
import dev.mbo.keycloak.admin.api.dto.IdentityProviderRepresentationDto;
import dev.mbo.keycloak.admin.api.dto.RolesRepresentationDto;
import dev.mbo.keycloak.admin.api.dto.UserRepresentationDto;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * PartialImportRepresentationDto
 */
@JsonPropertyOrder({
  PartialImportRepresentationDto.JSON_PROPERTY_CLIENTS,
  PartialImportRepresentationDto.JSON_PROPERTY_GROUPS,
  PartialImportRepresentationDto.JSON_PROPERTY_IDENTITY_PROVIDER_MAPPERS,
  PartialImportRepresentationDto.JSON_PROPERTY_IDENTITY_PROVIDERS,
  PartialImportRepresentationDto.JSON_PROPERTY_IF_RESOURCE_EXISTS,
  PartialImportRepresentationDto.JSON_PROPERTY_POLICY,
  PartialImportRepresentationDto.JSON_PROPERTY_ROLES,
  PartialImportRepresentationDto.JSON_PROPERTY_USERS
})
@JsonTypeName("PartialImportRepresentation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PartialImportRepresentationDto {
  public static final String JSON_PROPERTY_CLIENTS = "clients";
  private List<ClientRepresentationDto> clients = null;

  public static final String JSON_PROPERTY_GROUPS = "groups";
  private List<GroupRepresentationDto> groups = null;

  public static final String JSON_PROPERTY_IDENTITY_PROVIDER_MAPPERS = "identityProviderMappers";
  private List<IdentityProviderMapperRepresentationDto> identityProviderMappers = null;

  public static final String JSON_PROPERTY_IDENTITY_PROVIDERS = "identityProviders";
  private List<IdentityProviderRepresentationDto> identityProviders = null;

  public static final String JSON_PROPERTY_IF_RESOURCE_EXISTS = "ifResourceExists";
  private String ifResourceExists;

  /**
   * Gets or Sets policy
   */
  public enum PolicyEnum {
    SKIP("SKIP"),
    
    OVERWRITE("OVERWRITE"),
    
    FAIL("FAIL");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PolicyEnum fromValue(String value) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_POLICY = "policy";
  private PolicyEnum policy;

  public static final String JSON_PROPERTY_ROLES = "roles";
  private RolesRepresentationDto roles;

  public static final String JSON_PROPERTY_USERS = "users";
  private List<UserRepresentationDto> users = null;

  public PartialImportRepresentationDto() {
  }

  public PartialImportRepresentationDto clients(List<ClientRepresentationDto> clients) {
    
    this.clients = clients;
    return this;
  }

  public PartialImportRepresentationDto addClientsItem(ClientRepresentationDto clientsItem) {
    if (this.clients == null) {
      this.clients = new ArrayList<>();
    }
    this.clients.add(clientsItem);
    return this;
  }

   /**
   * Get clients
   * @return clients
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CLIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ClientRepresentationDto> getClients() {
    return clients;
  }


  @JsonProperty(JSON_PROPERTY_CLIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClients(List<ClientRepresentationDto> clients) {
    this.clients = clients;
  }


  public PartialImportRepresentationDto groups(List<GroupRepresentationDto> groups) {
    
    this.groups = groups;
    return this;
  }

  public PartialImportRepresentationDto addGroupsItem(GroupRepresentationDto groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GroupRepresentationDto> getGroups() {
    return groups;
  }


  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroups(List<GroupRepresentationDto> groups) {
    this.groups = groups;
  }


  public PartialImportRepresentationDto identityProviderMappers(List<IdentityProviderMapperRepresentationDto> identityProviderMappers) {
    
    this.identityProviderMappers = identityProviderMappers;
    return this;
  }

  public PartialImportRepresentationDto addIdentityProviderMappersItem(IdentityProviderMapperRepresentationDto identityProviderMappersItem) {
    if (this.identityProviderMappers == null) {
      this.identityProviderMappers = new ArrayList<>();
    }
    this.identityProviderMappers.add(identityProviderMappersItem);
    return this;
  }

   /**
   * Get identityProviderMappers
   * @return identityProviderMappers
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_IDENTITY_PROVIDER_MAPPERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<IdentityProviderMapperRepresentationDto> getIdentityProviderMappers() {
    return identityProviderMappers;
  }


  @JsonProperty(JSON_PROPERTY_IDENTITY_PROVIDER_MAPPERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdentityProviderMappers(List<IdentityProviderMapperRepresentationDto> identityProviderMappers) {
    this.identityProviderMappers = identityProviderMappers;
  }


  public PartialImportRepresentationDto identityProviders(List<IdentityProviderRepresentationDto> identityProviders) {
    
    this.identityProviders = identityProviders;
    return this;
  }

  public PartialImportRepresentationDto addIdentityProvidersItem(IdentityProviderRepresentationDto identityProvidersItem) {
    if (this.identityProviders == null) {
      this.identityProviders = new ArrayList<>();
    }
    this.identityProviders.add(identityProvidersItem);
    return this;
  }

   /**
   * Get identityProviders
   * @return identityProviders
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_IDENTITY_PROVIDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<IdentityProviderRepresentationDto> getIdentityProviders() {
    return identityProviders;
  }


  @JsonProperty(JSON_PROPERTY_IDENTITY_PROVIDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdentityProviders(List<IdentityProviderRepresentationDto> identityProviders) {
    this.identityProviders = identityProviders;
  }


  public PartialImportRepresentationDto ifResourceExists(String ifResourceExists) {
    
    this.ifResourceExists = ifResourceExists;
    return this;
  }

   /**
   * Get ifResourceExists
   * @return ifResourceExists
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IF_RESOURCE_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIfResourceExists() {
    return ifResourceExists;
  }


  @JsonProperty(JSON_PROPERTY_IF_RESOURCE_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIfResourceExists(String ifResourceExists) {
    this.ifResourceExists = ifResourceExists;
  }


  public PartialImportRepresentationDto policy(PolicyEnum policy) {
    
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PolicyEnum getPolicy() {
    return policy;
  }


  @JsonProperty(JSON_PROPERTY_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }


  public PartialImportRepresentationDto roles(RolesRepresentationDto roles) {
    
    this.roles = roles;
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RolesRepresentationDto getRoles() {
    return roles;
  }


  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoles(RolesRepresentationDto roles) {
    this.roles = roles;
  }


  public PartialImportRepresentationDto users(List<UserRepresentationDto> users) {
    
    this.users = users;
    return this;
  }

  public PartialImportRepresentationDto addUsersItem(UserRepresentationDto usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UserRepresentationDto> getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(List<UserRepresentationDto> users) {
    this.users = users;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartialImportRepresentationDto partialImportRepresentation = (PartialImportRepresentationDto) o;
    return Objects.equals(this.clients, partialImportRepresentation.clients) &&
        Objects.equals(this.groups, partialImportRepresentation.groups) &&
        Objects.equals(this.identityProviderMappers, partialImportRepresentation.identityProviderMappers) &&
        Objects.equals(this.identityProviders, partialImportRepresentation.identityProviders) &&
        Objects.equals(this.ifResourceExists, partialImportRepresentation.ifResourceExists) &&
        Objects.equals(this.policy, partialImportRepresentation.policy) &&
        Objects.equals(this.roles, partialImportRepresentation.roles) &&
        Objects.equals(this.users, partialImportRepresentation.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clients, groups, identityProviderMappers, identityProviders, ifResourceExists, policy, roles, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartialImportRepresentationDto {\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    identityProviderMappers: ").append(toIndentedString(identityProviderMappers)).append("\n");
    sb.append("    identityProviders: ").append(toIndentedString(identityProviders)).append("\n");
    sb.append("    ifResourceExists: ").append(toIndentedString(ifResourceExists)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

